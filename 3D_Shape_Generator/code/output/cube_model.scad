// Generated by SolidPython 1.1.3 on 2024-12-13 22:35:04


cube(size = [50, 50, 100]);
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import cv2
import os
from solid import cube, cylinder, sphere, union, scad_render_to_file
from solid.utils import polyhedron
import numpy as np


# Step 1: Preprocessing and Contour Detection
def preprocess_image(image_path):
    img = cv2.imread(image_path)
    if img is None:  # Check if the image was successfully loaded
        raise FileNotFoundError(f"Error: Unable to load image at '{image_path}'. Check the file path!")
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, binary = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)
    return binary


def detect_contours(binary_img):
    contours, _ = cv2.findContours(binary_img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    contours = sorted(contours, key=cv2.contourArea, reverse=True)
    return contours


# Step 2: Shape Detection Function
def detect_shape(contours):
    for contour in contours:
        epsilon = 0.04 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)
        if len(approx) == 3:
            return "Triangle"
        elif len(approx) == 4:
            (x, y, w, h) = cv2.boundingRect(approx)
            aspect_ratio = w / float(h)
            if 0.95 <= aspect_ratio <= 1.05:
                return "Square"
            else:
                return "Rectangle"
        elif len(approx) > 4:
            return "Circle"
    return "Unknown"


# Step 3: 3D Model Generation Functions
def create_pyramid(base_width, base_depth, height):
    vertices = [
        [0, 0, 0],                          # Bottom-front-left
        [base_width, 0, 0],                 # Bottom-front-right
        [base_width, base_depth, 0],        # Bottom-back-right
        [0, base_depth, 0],                 # Bottom-back-left
        [base_width / 2, base_depth / 2, height]  # Apex (centered above the base)
    ]
    faces = [
        [0, 1, 4],  # Front face
        [1, 2, 4],  # Right face
        [2, 3, 4],  # Back face
        [3, 0, 4],  # Left face
        [0, 1, 2, 3]  # Base
    ]
    return polyhedron(points=vertices, faces=faces)


def generate_3d_model(geometry_type, dimensions, output_file):
    """
    Generate a 3D model based on the detected geometry type.
    """
    width, depth, height = dimensions
    if geometry_type == "cube" or geometry_type == "square":
        model = cube([width, depth, height])
    elif geometry_type == "cylinder":
        radius = width / 2.0
        model = cylinder(r=radius, h=height)
    elif geometry_type == "sphere":
        radius = min(width, depth, height) / 2.0
        model = sphere(r=radius)
    elif geometry_type == "pyramid":
        model = create_pyramid(width, depth, height)
    else:
        raise ValueError(f"Unsupported geometry type: {geometry_type}")

    # Render and save the model
    scad_render_to_file(model, output_file)
    print(f"3D {geometry_type} model saved as '{output_file}'.")


# Main Workflow
if __name__ == "__main__":
    try:
        # Specify image paths
        image_paths = {
            "front": r"C:\Users\Akshay\Downloads\3D_Shape_Generator\3D_Shape_Generator\images\cylinderfrontview.png",
            "side": r"C:\Users\Akshay\Downloads\3D_Shape_Generator\3D_Shape_Generator\images\cylindersideview.png",
            "top": r"C:\Users\Akshay\Downloads\3D_Shape_Generator\3D_Shape_Generator\images\cylindertopview.png"
        }

        # Ensure output folder exists
        output_folder = "output"
        os.makedirs(output_folder, exist_ok=True)

        # Preprocess images
        front_img = preprocess_image(image_paths["front"])
        side_img = preprocess_image(image_paths["side"])
        top_img = preprocess_image(image_paths["top"])

        # Detect contours
        front_contours = detect_contours(front_img)
        side_contours = detect_contours(side_img)
        top_contours = detect_contours(top_img)

        # Detect shapes from contours
        front_shape = detect_shape(front_contours)
        side_shape = detect_shape(side_contours)
        top_shape = detect_shape(top_contours)

        print(f"Detected Shapes - Front: {front_shape}, Side: {side_shape}, Top: {top_shape}")

        # Define dummy dimensions (replace with actual dimension extraction if available)
        dimensions = (50, 50, 100)  # Example: width, depth, height

        # Determine shape and generate the SCAD file
        if front_shape == "Square" and top_shape == "Square" and side_shape == "Square":
            geometry_type = "cube"
        elif front_shape == "Rectangle" and top_shape == "Circle" and side_shape == "Rectangle":
            geometry_type = "cylinder"
        elif front_shape == "Triangle" and top_shape == "Circle" and side_shape == "Triangle":
            geometry_type = "pyramid"
        else:
            geometry_type = "Unknown"

        if geometry_type != "Unknown":
            output_file = os.path.join(output_folder, f"{geometry_type}_model.scad")
            generate_3d_model(geometry_type, dimensions, output_file)
        else:
            print("Unable to determine a suitable 3D shape for the detected contours.")

    except Exception as e:
        print(f"An error occurred: {e}")
 
 
************************************************/
